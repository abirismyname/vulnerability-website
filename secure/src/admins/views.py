import os

from admins.models import DoctorPermissions
from common.models import Enquiry, Users
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required, user_passes_test
from django.contrib.auth.models import User
from django.core.files.storage import FileSystemStorage
from django.shortcuts import HttpResponseRedirect, render, reverse
from django.utils.crypto import get_random_string
from doctor.models import Request
from django.conf import settings
import requests
import json

# Create your views here.

def testAdminRole(username):
    user = Users.objects.filter(username = username, role = 'admin')
    if len(user) == 0:
        return False
    else:
        return True

def adminLogin(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        secret_key = settings.RECAPTCHA_SECRET_KEY
        recaptcha = request.POST.get('g-recaptcha-response')
        secret_key = settings.RECAPTCHA_SECRET_KEY
        data = {
            'response': recaptcha,
            'secret': secret_key
        }
        resp = requests.post('https://www.google.com/recaptcha/api/siteverify', data=data)
        result_json = resp.json()
        user = authenticate(username = username, password = password)
        if user is None or testAdminRole(username) == False or result_json['success'] == False:
            return render(request, 'common/login.html', {'username': username, 'errorMessage': "Invalid username/password/role!", 'site_key' : settings.RECAPTCHA_SITE_KEY})
        else:
            login(request, user)
            return HttpResponseRedirect(reverse('admins:homepage', args = (username,)))
    else:
        return render(request, 'common/login.html', {'site_key':settings.RECAPTCHA_SITE_KEY})

@login_required
@user_passes_test(testAdminRole)
def adminHomePage(request, username):
    doctors = Users.objects.filter(role = 'doctor')
    patients = Users.objects.filter(role = 'patient')
    labtech = Users.objects.filter(role = 'lab technician')
    return render(request, 'admin/adminhomepage.html', {'username': username, 'doctors': doctors, 'patients': patients, 'labtech': labtech})

@login_required
@user_passes_test(testAdminRole)
def adminLogout(request, username):
    logout(request)
    return HttpResponseRedirect(reverse('admins:adminlogin'))

@login_required
@user_passes_test(testAdminRole)
def adminEnquiry(request, username):
    enquiries = Enquiry.objects.all()
    if len(enquiries) == 0:
        isEmpty = True
        return render(request, 'admin/adminenquiry.html', {'username': username, 'isEmpty': isEmpty})
    return render(request, 'admin/adminenquiry.html', {'username': username, 'enquiries': enquiries})

@login_required
@user_passes_test(testAdminRole)
def resolveEnquiry(request, username, enquiryId):
    enquiry = Enquiry.objects.filter(enquiryid = enquiryId)
    enquiry.delete()
    print(enquiry)
    return HttpResponseRedirect(reverse('admins:enquiry', args = (username,)))

@login_required
@user_passes_test(testAdminRole)
def deleteUser(request, username, deleteusername):
    print("DELETE")
    modeluser = Users.objects.filter(username = deleteusername)
    modeluser.delete()
    print("MODEL USER:")
    print(modeluser)
    authuser = User.objects.get(username = deleteusername)
    print("AUTH USER")
    print(authuser)
    authuser.delete()
    return HttpResponseRedirect(reverse('admins:homepage', args = (username,)))

@login_required
@user_passes_test(testAdminRole)
def createNewUser(request, username):
    if request.method == 'POST':
        newusername = request.POST.get('username')
        newpassword = request.POST.get('password')
        firstname = request.POST.get('firstname')
        lastname = request.POST.get('lastname')
        address = request.POST.get('address')
        email = request.POST.get('email')
        role = request.POST.get('role')
        name = str(firstname) + " " + str(lastname)
        isExists = False
        modeluser = Users.objects.filter(username = newusername)
        userauth = None
        try:
            userauth = User.objects.get(username = newusername)
            isExists = True
        except:
            isExists = False
        print(modeluser)
        print(isExists)
        if len(modeluser) != 0 or isExists == True:
            return render(request, 'admin/admincreateuser.html', {'username': username, 'errorMessage': 'User is already registerd! Please try a different username!'})
        else:
            newuser = Users(username = newusername, password = get_random_string(20), email = email,address = address, name = name, role = role,filedir = '/static/uploads/default.png')
            newuser.save()
            newUserAuth = User.objects.create_user(username = newusername, password = newpassword, email = email, first_name = firstname, last_name = lastname)
            newUserAuth.save()
            return render(request, 'admin/admincreateuser.html', {'username': username, 'successMessage':'User has been successfully created'})
    return render(request, 'admin/admincreateuser.html', {'username': username})

@login_required
@user_passes_test(testAdminRole)
def adminRequest(request, username):
    results = Request.objects.all()
    if len(results) == 0:
        isEmpty = True
        return render(request, 'admin/adminrequest.html', {'username': username, 'isEmpty': isEmpty})
    else:
        return render(request, 'admin/adminrequest.html', {'username': username, 'results': results})

@login_required
@user_passes_test(testAdminRole)
def deleteRequest(request, username, doctorid, patientid):
    results = Request.objects.filter(doctorid=doctorid, patientid = patientid)
    results.delete()
    return HttpResponseRedirect(reverse('admins:request', args = (username,)))

@login_required
@user_passes_test(testAdminRole)
def approveRequest(request, username, doctorid, patientid):
    newpermission = DoctorPermissions(doctorid = doctorid, patientid = patientid)
    newpermission.save()
    perm = Request.objects.filter(doctorid=doctorid, patientid = patientid)
    perm.delete()
    return HttpResponseRedirect(reverse('admins:request', args = (username,)))

@login_required
@user_passes_test(testAdminRole)
def adminProfilePage(request, username):
    details = Users.objects.filter(username = username)[0]
    fileDir = details.getFileDir()
    if request.method == 'POST':
        try:
            uploadedfile = request.FILES['fileupload']
        except:
            uploadedfile = None
        name = request.POST.get('name')
        email = request.POST.get('email')
        address = request.POST.get('address')
        if uploadedfile == None:
            newDetails = Users.objects.get(username = username)
            newDetails.name = name
            newDetails.email = email
            newDetails.address = address
            newDetails.save()
            return HttpResponseRedirect(reverse('admins:profile', args = (username,)))
        else:
            if uploadedfile.name.lower().endswith(('.png', '.jpg', '.jpeg', '.pdf')):
                filename = get_random_string(20)
                fileextension = os.path.splitext(uploadedfile.name)[1]
                filedirectory = os.getcwd() + '/static/uploads/' + str(filename) + str(fileextension)
                fs = FileSystemStorage()
                fs.save(filedirectory, uploadedfile)
                newDetails = Users.objects.get(username = username)
                newDetails.name = name
                newDetails.email = email
                newDetails.address = address
                newDetails.filedir = '/static/uploads/' + str(filename) + str(fileextension)
                newDetails.save()
                return HttpResponseRedirect(reverse('admins:profile', args = (username,)))
            else:
                errorMessage = "Invalid File Type. Please try again!"
                return render(request, 'admin/adminprofile.html', {'username': username, 'details': details, 'filedir': fileDir, 'errorMessage': errorMessage})
    return render(request, 'admin/adminprofile.html', {'username': username, 'details': details, 'filedir': fileDir})
