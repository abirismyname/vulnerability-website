import os
from datetime import datetime

from common.models import Users
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required, user_passes_test
from django.core.files.storage import FileSystemStorage
from django.http import FileResponse
from django.shortcuts import HttpResponseRedirect, redirect, render
from django.urls import reverse
from django.utils.crypto import get_random_string
from labtech.models import FileUploads

# Create your views here.
def testLabTechRole(username):
    user = Users.objects.filter(username = username, role = 'lab technician')
    if len(user) == 0:
        return False
    else:
        return True

@login_required
@user_passes_test(testLabTechRole)
def homePage(request, username):
    results = FileUploads.objects.filter(username = username)
    if len(results) == 0:
        isEmpty = True
        return render(request, 'labtech/labtechhomepage.html', {'username': username,'isEmpty': isEmpty})
    else:
        results = FileUploads.objects.filter(username = username)
        print(results)
        return render(request, 'labtech/labtechhomepage.html', {'username': username, 'results': results})

@login_required
@user_passes_test(testLabTechRole)
def labtechFileDownloads(request, username, fileid):
    uploadedfile = FileUploads.objects.filter(username = username, fileid = fileid)
    fileDirectory = uploadedfile[0].getFileDir()
    try:
        fs = FileSystemStorage(fileDirectory)
        print(fileDirectory)
        response = FileResponse(fs.open(fileDirectory, 'rb'), content_type='application/force-download')
        header = 'attachment; filename="' + os.path.basename(fileDirectory) + '"'
        response['Content-Disposition'] = header
        return response
    except:
        return render(request, 'labtech/labtechhomepage.html', {'username': username, 'errorMessage': 'File cannot be downloaded! Contact the admin for assistance'})

@login_required
@user_passes_test(testLabTechRole)
def labtechFileDelete(request, username, fileid):
    uploadedfile = FileUploads.objects.filter(username = username, fileid = fileid)
    fileDirectory = uploadedfile[0].getFileDir()
    try:
        os.remove(fileDirectory)
        uploadedfile.delete()
        return HttpResponseRedirect(reverse('labtech:homepage', kwargs = {'username' : username}))
    except:
        return render(request, 'labtech/labtechhomepage.html', {'username': username, 'errorMessage': 'File cannot be downloaded! Contact the admin for assistance'})

@login_required
@user_passes_test(testLabTechRole)
def labtechFileUploads(request, username):
    if request.method == 'POST':
        title = request.POST.get('filetitle')
        uploadedfile = request.FILES['fileupload']
        fileid = get_random_string(12)
        current_time = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
        if uploadedfile.name.lower().endswith(('.png', '.jpg', '.jpeg', '.pdf')):
            filename = get_random_string(20)
            fileextension = os.path.splitext(uploadedfile.name)[1]
            filedirectory = os.getcwd() + '/static/uploads/labtech/' + str(filename) + str(fileextension)
            fs = FileSystemStorage()
            fs.save(filedirectory, uploadedfile)
            newuploads = FileUploads(username = username,filedir = filedirectory, fileid = fileid, title = title,entrydate = current_time)
            newuploads.save()
            return render(request, 'labtech/labtechuploads.html', {'username': username,'successMessage': 'File has been uploaded successfully!'})
        else:
            return render(request, 'labtech/labtechuploads.html', {'username': username, 'errorMessage': 'Invalid file type! Please try again'})
    else:
        return render(request, 'labtech/labtechuploads.html', {'username': username})

def labtechLogin(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        user = authenticate(username = username, password = password)
        if user is None or testLabTechRole(username) == False:
            print('failed authentication')
            return render(request, "common/login.html", {'errorMessage': "Invalid username/password/role"})
        else:
            login(request, user)
            return HttpResponseRedirect(reverse('labtech:homepage', args = (username,)))
    return render(request, 'common/login.html', {})

@login_required
@user_passes_test(testLabTechRole)
def labtechLogout(request, username):
    logout(request)
    print('Lab Tech logout')
    return HttpResponseRedirect(reverse('labtech:labtechlogin'))

@login_required
@user_passes_test(testLabTechRole)
def labtechProfile(request, username):
    details = Users.objects.filter(username = username)[0]
    fileDir = details.getFileDir()
    if request.method == 'POST':
        try:
            uploadedfile = request.FILES['fileupload']
        except:
            uploadedfile = None
        name = request.POST.get('name')
        email = request.POST.get('email')
        address = request.POST.get('address')
        if uploadedfile == None:
            newDetails = Users.objects.get(username = username)
            newDetails.name = name
            newDetails.email = email
            newDetails.address = address
            newDetails.save()
            return HttpResponseRedirect(reverse('labtech:profile', args = (username,)))
        else:
            if uploadedfile.name.lower().endswith(('.png', '.jpg', '.jpeg', '.pdf')):
                filename = get_random_string(20)
                fileextension = os.path.splitext(uploadedfile.name)[1]
                filedirectory = os.getcwd() + '/static/uploads/' + str(filename) + str(fileextension)
                fs = FileSystemStorage()
                fs.save(filedirectory, uploadedfile)
                newDetails = Users.objects.get(username = username)
                newDetails.name = name
                newDetails.email = email
                newDetails.address = address
                newDetails.filedir = '/static/uploads/' + str(filename) + str(fileextension)
                newDetails.save()
                return HttpResponseRedirect(reverse('labtech:profile', args = (username,)))
            else:
                errorMessage = "Invalid File Type. Please try again!"
                return render(request, 'labtech/labtechprofile.html', {'username': username, 'details': details, 'filedir': fileDir, 'errorMessage': errorMessage})
    return render(request, 'labtech/labtechprofile.html', {'username': username, 'details': details, 'filedir': fileDir})
