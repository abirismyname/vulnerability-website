import hashlib
import json
import random
import secrets
import string
from datetime import datetime

import requests
from admins.models import DoctorPermissions
from common.models import Users
from django.conf import settings
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required, user_passes_test
from django.contrib.auth.models import User
from django.shortcuts import HttpResponseRedirect, redirect, render
from django.urls import reverse
from doctor.models import Records, Request
from patient.models import Appointment


# Create your views here.
def testDoctorRole(username):
    user = Users.objects.filter(username = username, role = 'doctor')
    if len(user) == 0:
        return False
    else:
        return True

def genRandomId():
    alphabet = string.ascii_letters + string.digits
    id = ''.join(secrets.choice(alphabet) for i in range(8))
    return hashlib.md5(id.encode('utf-8')).hexdigest()

def getPatientRecords(username):
    final_results = []
    permission_modelpatient = DoctorPermissions.objects.filter(doctorid = username)
    permissions_patients = []
    results = Records.objects.filter(doctorid = username)
    for x in permission_modelpatient:
        permissions_patients.append(str(x.getPatientId()))
    for y in permissions_patients:
        newresults = Records.objects.filter(patientid = y)
        for z in newresults:
            final_results.append(z)
    for x in results:
        final_results.append(x)
    return list(dict.fromkeys(final_results))
    
def getPatientList(username):
    final_results = []
    current_patients = []
    request_patients = []
    permissions_patients = []
    request_modelpatients = Request.objects.filter(doctorid = username)
    current_modalpatient = Records.objects.filter(doctorid  = username)
    permission_modelpatient = DoctorPermissions.objects.filter(doctorid = username)
    for x in permission_modelpatient:
        permissions_patients.append(str(x.getPatientId()))
    for x in request_modelpatients:
        request_patients.append(str(x.getPatientId()))
    for x in current_modalpatient:
        current_patients.append(str(x.getPatientId()))
    models_patient = Users.objects.filter(role = 'patient')
    for x in models_patient:
        patient_id = str(x.getUsername())
        if User.objects.filter(username = patient_id).exists() and patient_id not in current_patients and patient_id not in request_patients and patient_id not in permissions_patients:
            final_results.append(str(x.getUsername()))
        else:
            continue
    return final_results

@login_required
@user_passes_test(testDoctorRole)
def homePage(request, username):
    results = getPatientRecords(username)
    patient_list = getPatientList(username)
    errorMessage = None
    if request.method == 'POST':
        patientid = request.POST.get('patientid')
        reason = request.POST.get('reason')
        newrequest = Request(doctorid = username, patientid = patientid, reason = reason)
        newrequest.save()
        print("Request saved")
        return HttpResponseRedirect(reverse('doctor:homepage', kwargs = {'username' : username}))

    else:
        if len(results) == 0:
            isEmpty = True
            return render(request, 'doctor/doctorhomepage.html', {'isEmpty': isEmpty, 'username': username, 'patientlist':patient_list, 'errorMessage': errorMessage})
        return render(request, 'doctor/doctorhomepage.html', {'results': results, 'username':username, 'patientlist': patient_list, 'errorMessage': errorMessage})

@login_required
@user_passes_test(testDoctorRole)
def newRecords(request, username):
    if request.method == 'POST':
        patientid = request.POST.get('patientid')
        patientweight = request.POST.get('patientweight')
        patientheight = request.POST.get('patientheight')
        patientBP = request.POST.get('patientbp')
        patienttemp = request.POST.get('patienttemp')
        patientcondition = request.POST.get('patientcondition')
        print(patientcondition)
        patientdiagnosis = request.POST.get('patientdiagnosis')
        followup = request.POST.get('follow-up')
        current_time = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
        recordid = genRandomId()
        user = Users.objects.filter(username = patientid, role = "patient")
        if len(user) == 0:
            return render(request, 'doctor/doctornewrecords.html', {'username': username, 'errorMessage': 'Invalid User. Please try again!'})
        else:
            try:
                newRecord = Records(recordid = recordid, patientid = patientid,doctorid = username,height = patientheight, weight = patientweight, bp = patientBP, temp = patienttemp,conditions = patientcondition, diagnosis = patientdiagnosis, followup = followup, datetime = current_time, patientcomments = "NIL")
                newRecord.save()
                print("SUCCESS")
                return render(request, 'doctor/doctornewrecords.html', {'username': username, 'successMessage': 'Your records have been successfully recorded'})
            except Exception as e:
                print(e)
                return render(request, 'doctor/doctornewrecords.html', {'username': username, 'errorMessage': 'An error has occured. Please contact our helpdesk for assistance'})
    return render(request, 'doctor/doctornewrecords.html', {'username': username})

@login_required
@user_passes_test(testDoctorRole)
def checkAppointments(request, username):
    results = Appointment.objects.filter(doctorid = username, status = 'pending')
    if len(results) == 0:
        isEmpty = True
        return render(request, 'doctor/doctorcheckappt.html', {'username': username, 'isEmpty' : isEmpty})
    return render(request, 'doctor/doctorcheckappt.html', {'username': username, 'results': results})

@login_required
@user_passes_test(testDoctorRole)
def viewAppointments(request, username):
    results = Appointment.objects.filter(doctorid = username, status = 'approved')
    if len(results) == 0:
        isEmpty = True
        return render(request, 'doctor/doctorviewappt.html', {'username': username,'isEmpty': isEmpty})
    else:
        return render(request, 'doctor/doctorviewappt.html', {'username': username,'results':results})

@login_required
@user_passes_test(testDoctorRole)
def approveAppointments(request, username, requestId):
    appointment = Appointment.objects.get(apptId = requestId)
    appointment.status = 'approved'
    appointment.save()
    print(appointment.status)
    return HttpResponseRedirect(reverse('doctor:checkappt', kwargs = {'username' : username}))

@login_required
@user_passes_test(testDoctorRole)
def deleteAppointments(request, username, requestId):
    appointment = Appointment.objects.get(apptId = requestId)
    appointment.status = 'deleted'
    appointment.save()
    print(appointment.status)
    return HttpResponseRedirect(reverse('doctor:checkappt', kwargs = {'username' : username}))

@login_required
@user_passes_test(testDoctorRole)
def updateRecords(request, username, enquiryid):
    results = Records.objects.filter(recordid = enquiryid)
    return render(request,'doctor/doctorviewrecords.html', {'username': username, 'enquiryid': enquiryid, 'results' : results[0]})

def doctorLogin(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        secret_key = settings.RECAPTCHA_SECRET_KEY
        recaptcha = request.POST.get('g-recaptcha-response')
        secret_key = settings.RECAPTCHA_SECRET_KEY
        data = {
            'response': recaptcha,
            'secret': secret_key
        }
        resp = requests.post('https://www.google.com/recaptcha/api/siteverify', data=data)
        result_json = resp.json()
        user = authenticate(username = username, password = password)
        if user is None or result_json['success'] == False:
            print("Failed auth")
            return render(request, "common/login.html", {'errorMessage': "Invalid username and password"})
        else:
            if testDoctorRole(username) == False:
                print("Not doctor")
                return render(request, "common/login.html", {'errorMessage': "Invalid username and password",'site_key':settings.RECAPTCHA_SITE_KEY})
            else:
                print(testDoctorRole(username))
                login(request, user)
                return HttpResponseRedirect(reverse('doctor:homepage', args = (username,)))
    else:
        return render(request, "common/login.html", {'site_key':settings.RECAPTCHA_SITE_KEY})

@login_required
@user_passes_test(testDoctorRole)
def doctorLogout(request, username):
    logout(request)
    print("LOGOUT")
    return HttpResponseRedirect(reverse('doctor:doctorlogin'))

@login_required
@user_passes_test(testDoctorRole)
def doctorProfilePage(request, username):
    details = Users.objects.filter(username = username)[0]
    fileDir = details.getFileDir()
    if request.method == 'POST':
        try:
            uploadedfile = request.FILES['fileupload']
        except:
            uploadedfile = None
        name = request.POST.get('name')
        email = request.POST.get('email')
        address = request.POST.get('address')
        if uploadedfile == None:
            newDetails = Users.objects.get(username = username)
            newDetails.name = name
            newDetails.email = email
            newDetails.address = address
            newDetails.save()
            return HttpResponseRedirect(reverse('doctor:profile', args = (username,)))
        else:
            if uploadedfile.name.lower().endswith(('.png', '.jpg', '.jpeg', '.pdf')):
                filename = get_random_string(20)
                fileextension = os.path.splitext(uploadedfile.name)[1]
                filedirectory = os.getcwd() + '/static/uploads/' + str(filename) + str(fileextension)
                fs = FileSystemStorage()
                fs.save(filedirectory, uploadedfile)
                newDetails = Users.objects.get(username = username)
                newDetails.name = name
                newDetails.email = email
                newDetails.address = address
                newDetails.filedir = '/static/uploads/' + str(filename) + str(fileextension)
                newDetails.save()
                return HttpResponseRedirect(reverse('doctor:profile', args = (username,)))
            else:
                errorMessage = "Invalid File Type. Please try again!"
                return render(request, 'admin/adminprofile.html', {'username': username, 'details': details, 'filedir': fileDir, 'errorMessage': errorMessage})
    return render(request, 'doctor/doctorprofile.html', {'username': username, 'details': details, 'filedir': fileDir})
