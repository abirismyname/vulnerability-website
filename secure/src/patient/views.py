import hashlib
import random
import secrets
import string
from datetime import datetime

from common.models import Users
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required, user_passes_test
from django.shortcuts import HttpResponseRedirect, render, reverse
from doctor.models import Records
from patient.models import Appointment
from django.core.files.storage import FileSystemStorage

# Create your views here.

def genRandomId():
    alphabet = string.ascii_letters + string.digits
    id = ''.join(secrets.choice(alphabet) for i in range(8))
    return hashlib.md5(id.encode('utf-8')).hexdigest()

def testPatientRole(username):
    user = Users.objects.filter(username = username, role = 'patient')
    if len(user) == 0:
        return False
    else:
        return True

def patientLogin(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        user = authenticate(username = username, password = password)
        if user is None or testPatientRole(username) == False:
            return render(request, 'common/login.html', {'errorMessage': 'Invalid username/password/role.Please try again'})
        else:
            login(request, user)
            return HttpResponseRedirect(reverse('patient:homepage', args = (username,)))
    else:
        return render(request,'common/login.html', {})

def patientLogout(request, username):
    logout(request)
    return HttpResponseRedirect(reverse('patient:patientlogin'))

@login_required
@user_passes_test(testPatientRole)
def patientHomePage(request, username):
    results = Records.objects.filter(patientid = username)
    if len(results) == 0:
        isEmpty = True
        return render(request, 'patient/patienthomepage.html', {'isEmpty': isEmpty, 'username': username})
    else:
        return render(request, 'patient/patienthomepage.html', {'username': username, 'results': results})

@login_required
@user_passes_test(testPatientRole)
def patientViewDiagnosis(request, username, apptid):
    records = Records.objects.filter(recordid = apptid)[0]
    if request.method == 'POST':
        current_records = Records.objects.get(recordid = apptid)
        newpatientcomments = request.POST.get('comments')
        current_records.patientcomments = newpatientcomments
        current_records.save()
        return render(request, 'patient/patientviewdiagnosis.html', {'username': username, 'records': records, 'successMessage': 'Comments have been updated successfully'})
    else:
        return render(request, 'patient/patientviewdiagnosis.html', {'username': username, 'records': records})

@login_required
@user_passes_test(testPatientRole)
def patientViewAppt(request, username):
    results = Appointment.objects.filter(patientid = username, status = 'approved')
    print(results)
    if len(results) == 0:
        isEmpty = True
        return render(request, 'patient/patientviewappt.html', {'username': username, 'isEmpty' : isEmpty})
    else:
        return render(request, 'patient/patientviewappt.html', {'username': username, 'results': results})

@login_required
@user_passes_test(testPatientRole)
def patientNewAppt(request, username):
    if request.method == 'POST':
        doctorid = request.POST.get('doctorid')
        comments = request.POST.get('patientcomments')
        apptdate = request.POST.get('apptdate')
        doctorQuery = Users.objects.filter(username = doctorid, role = 'doctor')
        apptid = genRandomId()
        if len(doctorQuery) == 0:
            return render(request, 'patient/patientnewappt.html', {'username': username, 'errorMessage': 'Doctor does not exist.Please try again!'})
        else:
            apptRecord = Appointment(doctorid = doctorid, patientid = username,comments = comments, status = 'pending', apptDate = apptdate, apptId = apptid)
            apptRecord.save()
            return render(request, 'patient/patientnewappt.html', {'username': username, 'successMessage': 'Appt request has been successfully made!'})
    else:
        return render(request, 'patient/patientnewappt.html', {'username': username})

@login_required
@user_passes_test(testPatientRole)
def patientProfile(request, username):
    details = Users.objects.filter(username = username)[0]
    fileDir = details.getFileDir()
    if request.method == 'POST':
        try:
            uploadedfile = request.FILES['fileupload']
        except:
            uploadedfile = None
        name = request.POST.get('name')
        email = request.POST.get('email')
        address = request.POST.get('address')
        if uploadedfile == None:
            newDetails = Users.objects.get(username = username)
            newDetails.name = name
            newDetails.email = email
            newDetails.address = address
            newDetails.save()
            return HttpResponseRedirect(reverse('patient:profile', args = (username,)))
        else:
            if uploadedfile.name.lower().endswith(('.png', '.jpg', '.jpeg', '.pdf')):
                filename = get_random_string(20)
                fileextension = os.path.splitext(uploadedfile.name)[1]
                filedirectory = os.getcwd() + '/static/uploads/' + str(filename) + str(fileextension)
                fs = FileSystemStorage()
                fs.save(filedirectory, uploadedfile)
                newDetails = Users.objects.get(username = username)
                newDetails.name = name
                newDetails.email = email
                newDetails.address = address
                newDetails.filedir = '/static/uploads/' + str(filename) + str(fileextension)
                newDetails.save()
                return HttpResponseRedirect(reverse('patient:profile', args = (username,)))
            else:
                errorMessage = "Invalid File Type. Please try again!"
                return render(request, 'patient/patientprofile.html', {'username': username, 'details': details, 'filedir': fileDir, 'errorMessage': errorMessage})
    return render(request, 'patient/patientprofile.html', {'username': username, 'details': details, 'filedir': fileDir})
