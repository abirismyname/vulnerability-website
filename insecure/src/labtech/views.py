import hashlib
import os
from datetime import datetime

from django.core.files.storage import FileSystemStorage
from django.db import connection
from django.http import FileResponse
from django.shortcuts import HttpResponseRedirect, redirect, render
from django.urls import reverse
from django.utils.crypto import get_random_string

# Create your views here.

cursor = connection.cursor()


def homepage(request, username):
    query = "SELECT * from files where username = '%s';" % (username)
    results = cursor.execute(query).fetchall()
    if len(results) == 0:
        isEmpty = True
        return render(request, 'labtech/labtechhomepage.html',
                      {'username': username, 'isEmpty': isEmpty})
    else:
        return render(request, 'labtech/labtechhomepage.html',
                      {'username': username, 'results': results})


def login(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        hashed_password = hashlib.md5(str(password).encode()).hexdigest()
        checkLoginQuery = "SELECT * from login where status = 'logged in' and username = '%s';" % username
        checkUserQuery = "SELECT * from common_users where username = '%s' and password = '%s' and role = 'lab technician';" % (
            username, hashed_password)
        user_results = cursor.execute(checkUserQuery).fetchall()
        login_results = cursor.execute(checkLoginQuery).fetchall()
        if len(user_results) != 0 and len(login_results) != 0:
            return HttpResponseRedirect(
                reverse('labtech:homepage', args=(username,)))
        elif len(user_results) != 0 and len(login_results) == 0:
            updateLoginQuery = "UPDATE login set status = 'logged in' where username = '%s';" % username
            cursor.execute(updateLoginQuery)
            connection.commit()
            return HttpResponseRedirect(
                reverse('labtech:homepage', args=(username,)))
        else:
            errorMessage = "Invalid username/password. Please try again!"
            return render(request, 'common/login.html',
                          {'errorMessage': errorMessage})
    else:
        return render(request, 'common/login.html', {})


def logout(request, username):
    updateLogoutQuery = "UPDATE login set status = 'logged out' where username = '%s';" % username
    cursor.execute(updateLogoutQuery)
    connection.commit()
    return HttpResponseRedirect(reverse('labtech:login'))


def fileUploads(request, username):
    if request.method == 'POST':
        try:
            title = request.POST.get('filetitle')
            uploadedfile = request.FILES['fileupload']
            fileid = get_random_string(12)
            current_time = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
            filename = get_random_string(20)
            fileextension = os.path.splitext(uploadedfile.name)[1]
            filedirectory = os.getcwd() + '/static/uploads/labtech/' + \
                str(filename) + str(fileid) + str(fileextension)
            fs = FileSystemStorage()
            fs.save(filedirectory, uploadedfile)
            query = "INSERT INTO files(dir,username,fileid,title,entrydate) VALUES ('%s','%s','%s','%s','%s');" % (
                filedirectory, username, fileid, title, current_time)
            cursor.execute(query)
            connection.commit()
            successMessage = "File has been uploaded successfully!"
            return render(request,
                          'labtech/labtechuploads.html',
                          {'username': username,
                           'successMessage': successMessage})
        except BaseException:
            errorMessage = "An error has occured. Please contact the system adminstrator for more information."
            return render(request, 'labtech/labtechuploads.html',
                          {'username': username, 'errorMessage': errorMessage})
    return render(request,
                  'labtech/labtechuploads.html',
                  {'username': username})


def deleteFiles(request, username, fileid):
    try:
        query = "SELECT * from files where fileid = '%s';" % (fileid)
        filedirectory = cursor.execute(query).fetchall()[0][0]
        os.remove(filedirectory)
        deleteQuery = "DELETE from files where fileid = '%s';" % (fileid)
        print(deleteQuery)
        cursor.execute(deleteQuery)
        return HttpResponseRedirect(
            reverse(
                'labtech:homepage',
                kwargs={
                    'username': username}))
    except BaseException:
        return render(
            request,
            'labtech/labtechhomepage.html',
            {
                'username': username,
                'errorMessage': 'An error has occured! Please contact the admin for assistance'})


def downloadFiles(request, username, fileid):
    query = "SELECT * from files where fileid = '%s';" % (fileid)
    filedirectory = cursor.execute(query).fetchall()[0][0]
    try:
        fs = FileSystemStorage(filedirectory)
        print(filedirectory)
        response = FileResponse(
            fs.open(
                filedirectory,
                'rb'),
            content_type='application/force-download')
        header = 'attachment; filename="' + \
            os.path.basename(filedirectory) + '"'
        response['Content-Disposition'] = header
        return response
    except Exception as e:
        print(e)
        return render(
            request,
            'labtech/labtechhomepage.html',
            {
                'username': username,
                'errorMessage': 'File cannot be downloaded! Contact the admin for assistance'})


def changePassword(request, username):
    userQuery = "SELECT * from common_users where username = '%s';" % (
        username)
    role = cursor.execute(userQuery).fetchall()[0][4]
    if request.method == 'POST':
        current_password = cursor.execute(userQuery).fetchall()[0][1]
        input_oldpassword = request.POST.get('oldpassword')
        new_password = request.POST.get('newpassword')
        repeat_password = request.POST.get('repeatpassword')
        if str(new_password) == str(repeat_password) and str(
                current_password) == hashlib.md5(str(input_oldpassword).encode()).hexdigest():
            encrypted_newpassword = hashlib.md5(
                str(new_password).encode()).hexdigest()
            updateQuery = "UPDATE common_users set password = '%s' where username = '%s';" % (
                str(encrypted_newpassword), username)
            cursor.execute(updateQuery)
            connection.commit()
            return HttpResponseRedirect(reverse('labtech:login'))
        else:
            print("UNSUCCESSFULL change password")
            return render(
                request,
                'labtech/labtechchangepassword.html',
                {
                    'username': username,
                    'role': role,
                    'errorMessage': 'Password change unsuccessful. Please check your input fields!'})
    return render(request, 'labtech/labtechchangepassword.html',
                  {'username': username, 'role': role})


def profile(request, username):
    query = "SELECT * from common_users where username = '%s';" % (username)
    results = cursor.execute(query).fetchall()[0]
    filedir = str(results[5])
    if request.method == 'POST':
        try:
            uploadedfile = request.FILES['fileupload']
        except BaseException:
            uploadedfile = None
        name = request.POST.get('name')
        email = request.POST.get('email')
        address = request.POST.get('address')
        if uploadedfile is None:
            updateQuery = "UPDATE common_users set name = '%s', email = '%s', address = '%s' where username = '%s';" % (
                name, email, address, username)
            cursor.execute(updateQuery)
            connection.commit()
            return HttpResponseRedirect(
                reverse('labtech:profile', args=(username,)))
        else:
            filename = get_random_string(20)
            fileextension = os.path.splitext(uploadedfile.name)[1]
            print(fileextension)
            filedirectory = os.getcwd() + '/static/uploads/' + \
                str(filename) + str(fileextension)
            fs = FileSystemStorage()
            fs.save(filedirectory, uploadedfile)
            newFileDir = '/static/uploads/' + \
                str(filename) + str(fileextension)
            updateQuery = "UPDATE common_users set name = '%s', email = '%s', address = '%s', filedir = '%s' where username = '%s';" % (
                name, email, address, newFileDir, username)
            cursor.execute(updateQuery)
            connection.commit()
            return HttpResponseRedirect(
                reverse('labtech:profile', args=(username,)))
    return render(request,
                  'labtech/labtechprofile.html',
                  {'username': username,
                   'filedir': filedir,
                   'results': results})
