from django.shortcuts import render
from django.db import connection
from django.utils.crypto import get_random_string
from django.shortcuts import HttpResponseRedirect, redirect, render
from django.urls import reverse
from datetime import datetime
import hashlib

# Create your views here.

cursor = connection.cursor()
def getPatientList(username):
    getAllPatientsQuery = "SELECT * from common_users where role = 'patient';"
    getPatientQuery = "SELECT * from records where doctorid = '%s';" % (username)
    getRequestQuery = "SELECT * from requests where doctorid = '%s';" % (username)
    results = []
    recordPatients = []
    requestPatients = []
    allusers = cursor.execute(getAllPatientsQuery).fetchall()
    patientsresults = cursor.execute(getPatientQuery).fetchall()
    requestresults = cursor.execute(getRequestQuery).fetchall()
    for x in patientsresults:
        recordPatients.append(str(x[1]))
    for x in requestresults:
        requestPatients.append(str(x[1]))
    for x in allusers:
        id = str(x[0])
        if id not in recordPatients and id not in requestPatients:
            results.append(id)
    return results

def homepage(request, username):
    query = "SELECT * from records where doctorid = '%s';" % (username)
    cursor.execute(query)
    results = cursor.fetchall()
    patientlist = getPatientList(username)
    if request.method == 'POST':
        patientid = request.POST.get('patientid')
        reason = request.POST.get('reason')
        postQuery = "INSERT INTO requests(doctorid,patientid,reason) VALUES ('%s','%s','%s');" % (username,patientid    , reason)
        print(postQuery)
        cursor.execute(postQuery)
        connection.commit()
        # print("QUERY EXECUTED")
        return HttpResponseRedirect(reverse('doctor:homepage', kwargs = {'username' : username}))
    elif len(results) == 0:
        isEmpty = True
        return render(request, 'doctor/doctorhomepage.html', {'isEmpty' : isEmpty, 'username': username, 'patientlist' : patientlist})
    else:
        return render(request, 'doctor/doctorhomepage.html', {'username': username, 'results': results, 'patientlist' : patientlist})

def login(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        hashed_password = hashlib.md5(str(password).encode()).hexdigest()
        checkLoginQuery = "SELECT * from login where username = '%s' and status = 'logged in';" % username
        checkUserQuery = "SELECT * from common_users where username = '%s' and password = '%s' and role = 'doctor';" % (username, hashed_password)
        user_results = cursor.execute(checkUserQuery).fetchall()
        login_results = cursor.execute(checkLoginQuery).fetchall()
        if len(user_results) != 0 and len(login_results) != 0:
            return HttpResponseRedirect(reverse('doctor:homepage', args = (username,)))
        elif len(user_results) != 0 and len(login_results) == 0:
            print("USER LOGIN")
            updateLoginQuery = "UPDATE login set status = 'logged in' where username = '%s';" % username
            cursor.execute(updateLoginQuery)
            connection.commit()
            return HttpResponseRedirect(reverse('doctor:homepage', args = (username,)))
        else:
            errorMessage = "Invalid username/password. Please try again!"
            return render(request, 'common/login.html', {'errorMessage': errorMessage})
    else:
        return render(request, 'common/login.html', {})

def logout(request, username):
    updateLogoutQuery = "UPDATE login set status = 'logged out' where username = '%s';" % username
    cursor.execute(updateLogoutQuery)
    connection.commit()
    return HttpResponseRedirect(reverse('doctor:login'))

def newrecords(request, username):
    if request.method == 'POST':
        patientid = request.POST.get('patientid')
        weight = request.POST.get('patientweight')
        height = request.POST.get('patientheight')
        bp = request.POST.get('patientbp')
        temp = request.POST.get('patienttemp')
        diagnosis = request.POST.get('patientdiagnosis')
        condition = request.POST.get('patientcondition')
        followup = request.POST.get('follow-up')
        current_time = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
        recordid = get_random_string(20)
        patientcomments = 'NULL'
        userExistsQuery = "SELECT * from common_users where username = '%s' and role = 'patient';" % (patientid)
        results = cursor.execute(userExistsQuery).fetchall()
        if len(results) == 0:
            return render(request, 'doctor/doctornewrecords.html', {'username': username, 'errorMessage' : 'User does not exist. Please try again!'})
        else:
            updateQuery = "INSERT INTO RECORDS (recordid, patientid, doctorid,weight, height, bp, temp, conditions, diagnosis, followup, datetime, patientcomments) VALUES ('%s','%s', '%s','%s', '%s','%s','%s', '%s', '%s', '%s', '%s', '%s');" % (recordid,patientid,username,weight,height,bp,temp,condition,diagnosis,followup,current_time,patientcomments)
            cursor.execute(updateQuery)
            connection.commit()
            return render(request, 'doctor/doctornewrecords.html', {'username': username, 'successMessage': 'Records have been successfully saved!'})
    return render(request, 'doctor/doctornewrecords.html', {'username': username})

def doctorDiagnosis(request, username, recordid):
    getQuery = "SELECT * from records where recordid = '%s'" % (recordid)
    results = cursor.execute(getQuery).fetchall()
    print(results)
    if request.method == 'POST':
        diagnosis = request.POST.get('patientDiagnosis')
        followup = request.POST.get('doctorFollowUp')
        condition = request.POST.get('patientCondition')
        postQuery = "UPDATE records SET diagnosis = '%s', conditions = '%s', followup = '%s' where recordid = '%s';" % (diagnosis, condition, followup, recordid)
        cursor.execute(postQuery)
        connection.commit()
        return render(request, 'doctor/doctordiagnosis.html', {'username': username, 'recordid': recordid, 'results': results[0], 'successMessage':'Patient Record has been successfully updated!'})
    return render(request, 'doctor/doctordiagnosis.html', {'username': username, 'recordid': recordid, 'results' : results[0]})

def changePassword(request, username):
    userQuery = "SELECT * from common_users where username = '%s';" % (username)
    role = cursor.execute(userQuery).fetchall()[0][4]
    if request.method == 'POST':
        current_password = cursor.execute(userQuery).fetchall()[0][1]
        input_oldpassword = request.POST.get('oldpassword')
        new_password = request.POST.get('newpassword')
        repeat_password = request.POST.get('repeatpassword')
        if str(new_password) == str(repeat_password) and str(current_password) == hashlib.md5(str(input_oldpassword).encode()).hexdigest():
            encrypted_newpassword = hashlib.md5(str(new_password).encode()).hexdigest()
            updateQuery  = "UPDATE common_users set password = '%s' where username = '%s';" % (str(encrypted_newpassword), username)
            cursor.execute(updateQuery)
            connection.commit()
            return HttpResponseRedirect(reverse('doctor:login'))
        else:
            print("UNSUCCESSFULL change password")
            return render(request, 'doctor/doctorchangepassword.html', {'username': username, 'role': role, 'errorMessage': 'Password change unsuccessful. Please check your input fields!'})
    return render(request, 'doctor/doctorchangepassword.html', {'username': username, 'role' : role})

def checkAppt(request, username):
    query = "SELECT * from appointment where doctorid = '%s' and status = 'pending';" % (username)
    results = cursor.execute(query).fetchall()
    print(results)
    if len(results) == 0:
        isEmpty = True
        return render(request, 'doctor/doctorcheckappt.html', {'username': username, 'isEmpty' : isEmpty})
    else:
        print("NOT EMPTY")
        return render(request, 'doctor/doctorcheckappt.html', {'username': username, 'results': results})


def deleteAppt(request, username, apptid):
    query = "DELETE from appointment where apptid = '%s';" % (apptid)
    cursor.execute(query)
    connection.commit()
    return HttpResponseRedirect(reverse('doctor:checkappt', args = (username,)))

def approveAppt(request, username, apptid):
    print(apptid)
    query = "UPDATE appointment set status = 'confirmed' where apptid = '%s';" % (apptid)
    print(query)
    cursor.execute(query)
    connection.commit()
    print("COMMITTED")
    return HttpResponseRedirect(reverse('doctor:checkappt', args = (username,)))

def viewAppt(request, username):
    query = "SELECT * from appointment where doctorid = '%s' and status = 'confirmed';" % (username)
    results = cursor.execute(query).fetchall()
    print(results)
    if len(results) == 0:
        isEmpty = True
        return render(request, 'doctor/doctorviewappt.html', {'username': username, 'isEmpty' : isEmpty})
    else:
        return render(request, 'doctor/doctorviewappt.html', {'username': username, 'results': results})

def profile(request, username):
    query = "SELECT * from common_users where username = '%s';" % (username)
    results = cursor.execute(query).fetchall()[0]
    filedir = str(results[5])
    if request.method == 'POST':
        try:
            uploadedfile = request.FILES['fileupload']
        except:
            uploadedfile = None
        name = request.POST.get('name')
        email = request.POST.get('email')
        address = request.POST.get('address')
        if uploadedfile == None:
            updateQuery = "UPDATE common_users set name = '%s', email = '%s', address = '%s' where username = '%s';" % (name,email,address,username)
            cursor.execute(updateQuery)
            connection.commit()
            return HttpResponseRedirect(reverse('doctor:profile', args = (username,)))
        else:
            filename = get_random_string(20)
            fileextension = os.path.splitext(uploadedfile.name)[1]
            print(fileextension)
            filedirectory = os.getcwd() + '/static/uploads/' + str(filename) + str(fileextension)
            fs = FileSystemStorage()
            fs.save(filedirectory, uploadedfile)
            newFileDir = '/static/uploads/' + str(filename) + str(fileextension)
            updateQuery = "UPDATE common_users set name = '%s', email = '%s', address = '%s', filedir = '%s' where username = '%s';" % (name,email,address,newFileDir,username)
            cursor.execute(updateQuery)
            connection.commit()
            return HttpResponseRedirect(reverse('doctor:profile', args = (username,)))
    return render(request, 'doctor/doctorprofile.html',{'username': username, 'filedir' : filedir, 'results' : results})
