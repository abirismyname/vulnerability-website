from django.shortcuts import HttpResponseRedirect, redirect, render
import hashlib
from django.db import connection
from django.urls import reverse
from django.utils.crypto import get_random_string

# Create your views here.
cursor = connection.cursor()


def adminLogin(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        hashed_password = hashlib.md5(str(password).encode()).hexdigest()
        checkLoginQuery = "SELECT * from login where username = '%s' and status = 'logged in';" % (
            username)
        checkUserQuery = "SELECT * from common_users where username = '%s' and password = '%s' and role = 'admin';" % (
            username, hashed_password)
        user_results = cursor.execute(checkUserQuery).fetchall()
        login_results = cursor.execute(checkLoginQuery).fetchall()
        if len(user_results) != 0 and len(login_results) != 0:
            return HttpResponseRedirect(
                reverse('admins:homepage', args=(username,)))
        elif len(user_results) != 0 and len(login_results) == 0:
            updateLoginQuery = "UPDATE login set status = 'logged in' where username = '%s';" % username
            cursor.execute(updateLoginQuery)
            connection.commit()
            return HttpResponseRedirect(
                reverse('admins:homepage', args=(username,)))
        else:
            errorMessage = "Invalid username/password. Please try again!"
            return render(request, 'common/login.html',
                          {'errorMessage': errorMessage})
    else:
        return render(request, 'common/login.html', {})


def logout(request, username):
    updateLogoutQuery = "UPDATE login set status = 'logged out' where username = '%s';" % username
    cursor.execute(updateLogoutQuery)
    connection.commit()
    return HttpResponseRedirect(reverse('admins:login'))


def homepage(request, username):
    patientQuery = "SELECT * from common_users where role = 'patient';"
    doctorQuery = "SELECT * from common_users where role = 'doctor';"
    labtechQuery = "SELECT * from common_users where role = 'lab technician';"
    patients = cursor.execute(patientQuery).fetchall()
    doctors = cursor.execute(doctorQuery).fetchall()
    labtech = cursor.execute(labtechQuery).fetchall()
    print(patients)
    return render(request,
                  'admin/adminhomepage.html',
                  {'username': username,
                   'patients': patients,
                   'doctors': doctors,
                   'labtech': labtech})


def newUser(request, username):
    if request.method == 'POST':
        firstname = request.POST.get('firstname')
        lastname = request.POST.get('lastname')
        email = request.POST.get('email')
        address = request.POST.get('address')
        password = request.POST.get('password')
        role = request.POST.get('role')
        username = request.POST.get('username')
        name = firstname + " " + lastname
        checkQuery = "SELECT * from common_users where username = '%s';" % (
            username)
        hashed_password = hashlib.md5(str(password).encode()).hexdigest()
        userResults = cursor.execute(checkQuery).fetchall()
        if len(userResults) != 0:
            errorMessage = "Username already exists! Please try another username!"
            return render(request, 'admin/admincreateuser.html',
                          {'username': username, 'errorMessage': errorMessage})
        else:
            insertQuery = "INSERT INTO common_users(username, password,name,email,role,address) VALUES ('%s','%s','%s','%s','%s','%s');" % (
                username, hashed_password, name, email, role, address)
            insertLoginQuery = "INSERT into login(username) VALUES ('%s');" % (
                username)
            cursor.execute(insertLoginQuery)
            cursor.execute(insertQuery)
            connection.commit()
            successMessage = "New user has been registered!"
            return render(request,
                          'admin/admincreateuser.html',
                          {'username': username,
                           'successMessage': successMessage})
    return render(request,
                  'admin/admincreateuser.html',
                  {'username': username})


def deleteUser(request, username, delete_username, role):
    deleteQuery = "DELETE from common_users where username = '%s' and role = '%s';" % (
        delete_username, role)
    deleteLoginQuery = "DELETE from login where username = '%s';" % (username)
    cursor.execute(deleteQuery)
    cursor.execute(deleteLoginQuery)
    connection.commit()
    successMessage = "User has been successfully deleted!"
    return HttpResponseRedirect(reverse('admins:homepage', args=(username,)))


def getEnquiry(request, username):
    query = "SELECT * from enquiry;"
    results = cursor.execute(query).fetchall()
    if len(results) == 0:
        isEmpty = True
        return render(request, 'admin/adminenquiry.html',
                      {'username': username, 'isEmpty': isEmpty})
    else:
        return render(request, 'admin/adminenquiry.html',
                      {'username': username, 'results': results})


def resolveEnquiry(request, username, enquiryid):
    query = "DELETE from enquiry where enquiryid = '%s';" % (enquiryid)
    cursor.execute(query)
    connection.commit()
    return HttpResponseRedirect(reverse('admins:enquiry', args=(username,)))


def changePassword(request, username):
    userQuery = "SELECT * from common_users where username = '%s';" % (
        username)
    role = cursor.execute(userQuery).fetchall()[0][4]
    if request.method == 'POST':
        current_password = cursor.execute(userQuery).fetchall()[0][1]
        input_oldpassword = request.POST.get('oldpassword')
        new_password = request.POST.get('newpassword')
        repeat_password = request.POST.get('repeatpassword')
        if str(new_password) == str(repeat_password) and str(
                current_password) == hashlib.md5(str(input_oldpassword).encode()).hexdigest():
            encrypted_newpassword = hashlib.md5(
                str(new_password).encode()).hexdigest()
            updateQuery = "UPDATE common_users set password = '%s' where username = '%s';" % (
                str(encrypted_newpassword), username)
            cursor.execute(updateQuery)
            connection.commit()
            return HttpResponseRedirect(reverse('admins:login'))
        else:
            print("UNSUCCESSFULL change password")
            return render(
                request,
                'admin/adminchangepassword.html',
                {
                    'username': username,
                    'role': role,
                    'errorMessage': 'Password change unsuccessful. Please check your input fields!'})
    return render(request,
                  'admin/adminchangepassword.html',
                  {'username': username})


def profile(request, username):
    query = "SELECT * from common_users where username = '%s';" % (username)
    results = cursor.execute(query).fetchall()[0]
    filedir = str(results[5])
    if request.method == 'POST':
        try:
            uploadedfile = request.FILES['fileupload']
        except BaseException:
            uploadedfile = None
        name = request.POST.get('name')
        email = request.POST.get('email')
        address = request.POST.get('address')
        if uploadedfile is None:
            updateQuery = "UPDATE common_users set name = '%s', email = '%s', address = '%s' where username = '%s';" % (
                name, email, address, username)
            cursor.execute(updateQuery)
            connection.commit()
            return HttpResponseRedirect(
                reverse('admins:profile', args=(username,)))
        else:
            filename = get_random_string(20)
            fileextension = os.path.splitext(uploadedfile.name)[1]
            print(fileextension)
            filedirectory = os.getcwd() + '/static/uploads/' + \
                str(filename) + str(fileextension)
            fs = FileSystemStorage()
            fs.save(filedirectory, uploadedfile)
            newFileDir = '/static/uploads/' + \
                str(filename) + str(fileextension)
            updateQuery = "UPDATE common_users set name = '%s', email = '%s', address = '%s', filedir = '%s' where username = '%s';" % (
                name, email, address, newFileDir, username)
            cursor.execute(updateQuery)
            connection.commit()
            return HttpResponseRedirect(
                reverse('admins:profile', args=(username,)))
    return render(request,
                  'admin/adminprofile.html',
                  {'username': username,
                   'filedir': filedir,
                   'results': results})


def viewRequest(request, username):
    query = "SELECT * from requests where status = 'pending';"
    results = cursor.execute(query).fetchall()
    if len(results) == 0:
        isEmpty = True
        return render(request, 'admin/adminrequest.html',
                      {'username': username, 'isEmpty': isEmpty})
    else:
        return render(request, 'admin/adminrequest.html',
                      {'username': username, 'results': results})


def deleteRequest(request, username, doctorid, patientid):
    query = "DELETE from requests where doctorid = '%s' and patientid = '%s';" % (
        doctorid, patientid)
    cursor.execute(query)
    connection.commit()
    return HttpResponseRedirect(reverse('admins:request', args=(username,)))


def approveRequest(request, username, doctorid, patientid):
    query = "SELECT * from records where patientid = '%s';" % (patientid)
    print(query)
    results = cursor.execute(query).fetchall()
    for x in results:
        recordid = get_random_string(20)
        height = x[3]
        weight = x[4]
        bp = x[5]
        temp = x[6]
        conditions = x[7]
        diagnosis = x[8]
        followup = x[9]
        current_time = x[10]
        patientcomments = x[11]
        copyQuery = "INSERT INTO RECORDS(recordid,patientid,doctorid,height,weight,bp,temp,conditions,diagnosis, followup,datetime,patientcomments) VALUES ('%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s');" % (
            recordid, patientid, doctorid, height, weight, bp, temp, conditions, diagnosis, followup, current_time, patientcomments)
        cursor.execute(copyQuery)
        connection.commit()
        deleteQuery = "DELETE from requests where doctorid = '%s' and patientid = '%s';" % (
            doctorid, patientid)
        cursor.execute(deleteQuery)
        connection.commit()
    return HttpResponseRedirect(reverse('admins:request', args=(username,)))


def profile(request, username):
    query = "SELECT * from common_users where username = '%s';" % (username)
    results = cursor.execute(query).fetchall()[0]
    filedir = str(results[5])
    if request.method == 'POST':
        try:
            uploadedfile = request.FILES['fileupload']
        except BaseException:
            uploadedfile = None
        name = request.POST.get('name')
        email = request.POST.get('email')
        address = request.POST.get('address')
        if uploadedfile is None:
            updateQuery = "UPDATE common_users set name = '%s', email = '%s', address = '%s' where username = '%s';" % (
                name, email, address, username)
            cursor.execute(updateQuery)
            connection.commit()
            return HttpResponseRedirect(
                reverse('admins:profile', args=(username,)))
        else:
            filename = get_random_string(20)
            fileextension = os.path.splitext(uploadedfile.name)[1]
            print(fileextension)
            filedirectory = os.getcwd() + '/static/uploads/' + \
                str(filename) + str(fileextension)
            fs = FileSystemStorage()
            fs.save(filedirectory, uploadedfile)
            newFileDir = '/static/uploads/' + \
                str(filename) + str(fileextension)
            updateQuery = "UPDATE common_users set name = '%s', email = '%s', address = '%s', filedir = '%s' where username = '%s';" % (
                name, email, address, newFileDir, username)
            cursor.execute(updateQuery)
            connection.commit()
            return HttpResponseRedirect(
                reverse('admins:profile', args=(username,)))
    return render(request,
                  'admin/adminprofile.html',
                  {'username': username,
                   'filedir': filedir,
                   'results': results})
